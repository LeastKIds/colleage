5. 패키지 매니저
npm(Node Package Manager) : 사용법

5.1 npm 알아보기
---> 대체 관리툴 존재 : yarn

npm 노드 진영의 디폴트 패키지 관리자
yarn 페이스북사의 패키지 관리자

5.2 package.json : 패키지 관리 파일
개발 된 서비스에 필요한 패키지 정보를 저장
    * 노드 프로젝트 시작전에 폴더 내부에 무조건
    package.json을 작성해야 한다.
    - 콘솔에서 npm init 입력

    * 필요한 패키지 설치하기
    - npm install 패키지명 [--save] (이전 버전에선 이거 안 쓰면 package.json에 저장이 안됬다.)
    npm install express
    npm install morgan cookie-parser express-session 처럼 한꺼번에 설치 가능
    npm install --save--dev nodemon = npm install -D nodemon (실해할 땐 상관 없지만, 개발할 땐 필요 package.json에 따로 저장됨)
    
    - npm i 패키지명1 패키지명2 패키지명3 ...
    - npm i : 의존성 패치

    * 전역설치 : package.json에 기록되지 않는다.
    npm i --global rimraf
    npm i --g rimraf

    리눅스 rm -rf 명령어를 한 기능을 구현한 rimraf 패키지 설치

    rimraf node_modules : node_modules를 모두 지운다. (폴더 안에 폴더가 있어도 지움)

    * 하지만 전역 설치를 꺼려함
        - npm i -D rimraf : 설치하면서 개발용 패키지로 정의
        - npx rimraf node_modules 

    * package.json이 존재할 경우
    내 프로젝트 실행시
    npm install 명령어 입력

    노드_모듈 파일의 경우 필요 없음. 패키지.제이손만 있으면 패키지를 모두 받을 수 있다.

    5.3 패키지 버전 이해하기 : Semver 방식으로 처리
    1            .0          .7
    major        minor       patch(간단 버그 수정)
        ^ : minor 버전까지만 설치하거나 업데이트 한다. : npm update [패키지명]

    1.x.x 1.0.0에서 2.0.0미만 버전 설치하거나 업데이트 가능

     ~ : patch 버전만 설치하거나 업데이트

    "express" : "4.17.1" ===> 4.17.x 가능
                              4.18.x 불가능

    * 특정 버전의 패키지 설치
    npm -i 패키지명@버전
    npm -i express@^4.17.1 등등
    npm -i express@latest(x) : 안정된 가장 마지막 버전
    npm -i express@next : 알파나 베타 버전까지의 가장 최신 버전

