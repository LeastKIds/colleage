3. 노드 기능 알아보기
외우기 보다 익숙해 지기
시간이 많이 없기에 외우는 것도 좋다.
잊어버린 경우에는 다시 찾아보기

3.1 REPL 사용하기
Read Evaluate Print Loop
읽고 평가하고 출력하는 루프

java.exe
javac.exe : .java ---> .class 

NodeJs에도 소스코드를 읽고 평가하고
그 결과를 출력해주는 명령어 : node.exe
스크립트 언어에서 주로 실행을 위해 사용됨
---> 스크립트 언어는 미리 컴파일 하지 않고, 
한줄, 한줄 읽고 평가하고 그 결과를 출력

JS의 실행환경
1) 브라우저의 콘솔 텝
2) Node의 콘솔 : REPL
    node.exe

실행 방법
1) Ctrl + ` 입력 > node 입력 > 엔터
2) 실행하려는 폴더에서 Shift + 오른쪽 마우스 버튼 > PowerShell 실행
    > node 입력 > 엔터
종료 방법
1) Ctrl + c 두 번
2) .exit > 엔터

* 테스트 : p91

* 소스코드가 일반적으로 길기 때문에 소스 파일을 파일로 저장한 다음
    실행시키는 것이 보통.

3.2 JS 파일 실행하기
1) helloWorld.js 파일 생성
2) node 파일명
    node helloWorld[.js] // 확장자 생략 가능

3.3 모듈로 만들기
모둘(module) : 특정 기능을 하는 함수나 변수들의 집합

1) 3파일을 같은 폴더에 작성함
2) var.js / func.js / index.js 파일 작성
3) module.exports = 변수, 객체, 함수

모듈 사용하기
    - 다른 파일의 모듈 불러오기 : require(모듈 경로)

3.4 노드 내장 객체 알아보기
    * 내장 객체 : 이미 노드가 정의해 둔 모듈
    * require 없이 사용 가능한 객체

    사용 해본 내장 객체
    console 객체, module 객체

    window객체 : BOM 객체, 브라우저에서만 사용 가능
    document객체 : DOM객체, 브라우저에서만 사용 가능

3.4.1 global
전역개게 ---> 파일간의 데이터 공유 ---> 남용하지 말자!!
생략 가능

3.4.2 console : [global.]console
    - console.log()
    - console.error()
    - console.time(레이블), console.timeEnd(레이블)

3.4.3 타이머
    - setTimeout(콜백함수, 밀리 초)
    - setInterval(콜백함수, 밀리 초)
    - setImmediate(콜백함수)
    ㄴset + ~~~~ 함수의 반환값 : 타이머 아이디

    --->
    타이머 취소 : clear+~~~~~함수(아이디)
    clearTimeout(아이디)
    clearInterval(아이디)
    clearImmediate(아이디)


    setImmediate(콜백) VS setTimeout(콜백,0)
    --->
    기본 적으로는 setImmediate가 먼저 실행 되지만 항상 그런 것은 아니다.
    setTimeout(콜백,0)을 사용하지 않는 것을 권함(실행 순서가 꼬일 수 있음)

3.4.4 __filename, __dirname

__filename : 실행 할 때 현재 실행중인 파일 명
__dirname : 실행 할 때 현재 실행중인 폴더명(디렉토리 명)
경로를 포함 하여 표시.

* 경로 구분자
윈도우 : \
맥,리눅스 : /

3.4.5 module, exports, require
    * JS에서 함수는 Function형 객체
    * 모듈 작성 : module.exports (global.module.exports)
    * 모듈작성 추가 방법 : exports (global.exports)

    exports ==> module.exports ==> {} // 실제 모듈

    * module.exports으로 모듈 작성 권장

    * 노드에서의 this 의미
        - 최상위 스코프(전역 스코프)의 this : module.exports와 exports 객체를 의미
        - 함수 내의 this : global 객체, JS함수 ---> Function형 객체
    
    * require() : 함수 ---> Function형 객체
        - require.cash
        - require.main

    * require() 주의사항
        - 상호 의존관계인 경우 주의가 필요 (dependency 문제 발생)
        - ctrl + F2 : 같은 내용 한꺼번에 바꾸기 (refactoring)

3.4.6 process

node.exe.가 메인메모리에 로딩되어 실행되고 있는 것을 프로세스

    - process.arch : 프로세서 아키텍쳐 정보
                        arm, ia32
    - process.version : node의 버전
    - process.platform : os의 플랫폼 정보
                        linux, darwin, freebsd
    - process.pid : 프로세스의 index
    - process.uptime() : 프로세스가 시작된 후의 흐른 시간
    - process.cwd() : 프로세스 실행되는 경로
        cwd : current working directory
    - process.cpuUsage() : 프로세스의 CPU 사용량을 의미

3.4.6.1 process.env
env : environment(환경)
process.env에 환경정보를 저장해 두고
그 정보를 실행시 사용한다.
주로 공개되지 말아야 할 정보를 담아둔다.
(DB의 아이디, 패스워드)

3.4.6.2 process.nextTick(콜백)
    * 즉시 실행 방법
        1) setTimeout(콜백,0)
        2) setImmediate(콜백)
        3) process.nextTick(콜백)
        4) promise.resolve()의 콜백
        3),4)번 제일 먼저 실행 : microtask
    * 주의사항 : microtask 내부에서 재귀 호출 금지(권고)

3.4.6.3 process.exit(코드)
    : 프로세스를 종료 시킴
    0 : 정상 종료
    1이상 : 비정상 종료

3.5 노드 내장 모듈 사용하기
https://nodejs.org/dist/latest-v14.x/docs/api/
참고

3.5.1 OS    (별로 중요하지 않다)
    - operating system 운영체제
    - 운영체제의 정보를 다루는 내장 모듈

3.5.2 path (2.5 별점 os보단 중요하다)

    - 폴더와 파일의 경로를 위한 모듈
    ---> OS별로 경로 구분자가 다름

    * 경로 구분자 (path sep)
    - 윈도우 : \ (back slash)
        C:\User\ZeroCho
    - POSIX : / (맥, 리눅스 등 포함 유닉스 계열)
        C:/User/ZeroCho

    노드에서 별다른 이야기가 없으면
    '/'로 구분한다.

3.5.3 url (4 별점)

    - 인터넷 주소 관련 모듈
    - 인터넷 주소를 차리하는 방식이 2가지
        1) WHATWG(웹의 표준 재정하는 단체)
        2) 노두에서 전통적으로 사용해 온 방식

    119p
    https   ://[user     :pass              @]sub.host.com      :8080           /p/a/t/h    ?       query=string    #hash
    프로토콜    사용자  비밀번호([]생략)    서버 도메인 주소        포트 번호       경로      기준      요청 쿼리       해시코드

    - 요청쿼리
    키=값
    키1=값1 & 키2=값2 & 키3=값3 ... 

    - 해시코드 : a태그의 레이블

    *searchParams 이용법    // WHATWG 사용방식
    p121 ~ p122

3.5.4 querystring
    - 기존 노드 방식

    - parse() : 문자열 ---> 객체
    - format() : 객체 ---> 문자열
    - stringify() : 객체 ---> 문자열

3.5.5 crypto (중요하지 않음)
    - 암호화를 도와주는 모듈
    - 주요 정보는(비밀번호) 암호화 할 필요가 있음.

    3.5.5.1 단방향 암호화
        - 비밀번호에주로 사용
        - 복호화가 불가능한 암호화 방식
            복호화 : 암호화와 반대 기능(암호 해석 기능) / 암호문을 평문으로 변경
            암호화 : 평문을 암호처리한 것
        - 암호된걸 다시 풀 수 없음 / 비밀번호 입력하면 그 값을 암호화한 뒤 저장되어있는 암호화 값과 비교

        * 해시 기법 : 어떤 문자열을 고정된 길이의 다른 문자열로 바꾸는 방식
                    3자리 비밀번호든 1000자리 비밀번호든 길이가 같은 암호문으로 바꿈
        - 다양한 알고리즘 존재

        ==> 문제
        해결하기 위해 126p 방식

        salt : 소금
        salt + 비밀번호 : pbkdf2
                
    3.5.5.2 양방향 암호화
        - 대칭형 암호화
        --> 암호문 <-> 복호화문 (서로 번역 가능)

3.5.6 util (솔직히 몰라도 됨)
    - util.deprecate() : 함수가 deprecated 처리됨을 알림 (지금은 사용이 가능하나 가까운 미래에 사라질 수 있다)
    - util.promisify() : 비promise되어 있는 것을 promise로 만든다.

3.5.7 worker_threads (우리 단계에선 중요하지 않다)
    - 멀티스레드 프로그래밍
    - isMainThread : 메인 스레드인가 : true -> 메인스레드
                                        false -> worker가 된다

3.5.8 child_process (알면 좋지만 잘 쓰진 않는다)