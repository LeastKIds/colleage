4. http 모듈로 서버만들기
4.1 요청과 응답 이해하기
    * Server VS Client
    - 서버(웹 서버) vs 클라이언트(웹브라우저)

    * Request VS Response
    - Client에서 Server로 Request를 보냄
    - Server는 Request 정보를 확인 후 처리
    - Server는 처리 결과를 Client에 Response함
    --> 이벤트 처리와 유사
    요청이벤트가 서버로 오면
    미리 정해둔 이벤트리스너(콜백)를
    실행(처리)하고 그 결과를 클라이언트로 응답함

    * HTTP : Request와 Response를 위해
    사용하는 통신규약(프로토콜)

    HyperText Transfer Protocol
    - HTML
    - HTTP의 메시지를 주고 받음
    - HTTP Message 구성
        - HTTP Headers
        - HTTP Body
    - Http Message 종류
        - HTTP 요청 메시지
            Header + Body(사용자 입력 값)
        - HTTP 응답 메시지
            Header + Body(html문서, Js, jpg ... 리소스)
    - localhost : 현재 컴퓨터의 내부 도메인 주소
        - 127.0.0.1 : 현재 컴퓨터의 내부 IP 주소
    - 포트번호
        - 0~1024 포트번호는 시스템 예약 포트번호(사용 안하는 편이 좋음)
        80 : 웹서버 포트
        21 : FTP서버포트
        23 : TELNET 서버포트

    * html 파일을 읽어서 전송하기 : fs모듈 사용

    * HTTP status code
    - 2XX : 성공, 200(성공), 201(작성됨)
    - 3XX : 리다이렉션, 301(영구 이동), 302(임시 이동), 304(수정되지 않음)
    - 4XX : 요청 오류, 400(잘못된 요청), 401(권한 없음), 403(금지됨), 404(찾을 수 없음)
    - 5XX : 서버 오류, 500(내부 서버 오류), 502(불량 게이트웨이), 503(서비스를 사용할 수 없음)

    * 노드에서 HTTP서버를 만들기 위해
    http모듈을 사용함

4.2 RESt와 라우팅 사용하기
    - REST : REpresentational State Transfer
        대표적인 상태 전달.
        주소
    - RESTful 하게 서비스 개발 권장
        주소의 의미를 명확하게 전달하도록 주소 구성을 하자.
    - RESTful하게 개발 권장 사항 : 주소의미의 명확성 확보 -> 서버, 클라이언트영역의 분리 원활
        주소 : 명사형으로 지정
        /user : 사용자관련 서비스 요청 주소
        /post : 게시글 관련 서비스 요청 주소
    CRUD(Create-Read-Update-Delete)의 표현
        HTTP 요청 방법(Request Method)

    * HTTP Request Method : GET, POST, PUT, PATCH, DELETE
    POSTman이용 테스트

    GET /user
    POST /user
    PATCH /user/1 : 1번 아이디를 가지고 있는 유저의 내용을 바꾸어라
    DELETE /user/1 : 1번 아이디를 가지고 있는 유저를 삭제해라

    * REST 주소 구조로 개발한 서버를 RESTful 하다라고 함.
    RESTful 웹서버라고 한다.

180p 표 보기

    * req : 사용자의 요청 정보
    - req.method : GET, POST, DELETE, PATCH, PUT, OPTIONS
    - req.url : 요청 주소, /, /users

    * res : 서버의 응답정보 객체

    1.GET / 요청
        http://localhost:8082/

4.3 쿠키와 세션 이해하기
    cookie, session
    쿠키 사용 이유 : HTTP 특성 때문
    HTTP는 상태저장히자 않음 : Stateless Protocol
    사용자의 구별이 어려움 : 로그인 처리

    req
        - req.url
        - req.method
        - req.headers.cookie : 요청 헤더의 쿠키 정보
    
    쿠키 : 키=값

    * 쿠키 설정하기
    res.writeHead(응답코드,{'Set-Cookie' : '키1=값1; 키2=값2;...'})

    * HttpOnly : JS(브라우저에서 실행되는)에서 쿠키 접근 불가능하게 설정
    브라우저에서 실행된 JS: html파일 안의 script태그 내의 JS

    쿠키의 단점 : 클라이언트(브라우저)에 저장 ---> 해킹 가능성 높아짐
    쿠키 조작 가능
    ---> 방지책 : 세션
    세션은 쿠키의 도움없이는 불가
    세션은 서버에 정보를 저장
                                196p 처럼 처리하지는 않음
    서버에서 Redis 활용 세션 처리 많음