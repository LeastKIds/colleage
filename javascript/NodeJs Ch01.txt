1. 노드 시작하기

자바스크립트 이해 : https://ko.javasript.info/

1.1 핵심 개념 이해하기
NodeJs 정의 : 
    크롬 vs 자바스크립트 엔진으로 빌드 된 자바스크립트 런타임
    Runtime - 실행 시간으로써의 환경
    자바스크립트의 실행 환경
    NodeJs 만든이 : Ryan Lienhart Dahl

    자바로 비유하면 JVM, .NET프레임워크

1.1.1 서버(Serve) : 
서버 : 네트워크를 통해 클라이언트에 
    정보나 서비스를 제공하는 컴퓨터 또는 프로그램

클라이언트(Client) : 
    사용자 PC, 모바일 기기, IOT 장비
    서버에 서비스를 요청하는 컴퓨터나 프로그램
    웹브라우저
    

클라이언트(client)는 서버(serve)에게 요청(request)한다.
Serve는 Req 받으면 DataBase로 부터 Data를 가져온다.
Data를 가져오면 Serve는 Client에게 응답(Response)한다.
Client 부분을 Front-End
Serve 부분을 Back-End


NodeJs,React, view,앵골라 등 여러 언어가 있다.

1.1.2 자바스크립트 런타임 : 
    자바스크립트 실행 환경, 실행기
    libuv : 논 블록킹 I/O, 이벤트 기반 처리
    v8 : 자바스크립트 엔진(해석기)

# 노드의 특징
이벤트 기반
논 블로킹 I/O
싱글 스레드


1.1.3 이벤트 기반
Event-driven

1) Event : 클릭. 키보드 입력, 화면 변화 등
    컴퓨터에서 발생되는 시스템의 변화
    Event - Event Listener
            CallBack --> 함수로 구현, 콜백함수
            
* 이벤트 루프(Event Loop)

* 호출 스택(call stack)
    stack - LIFO (Last In First Qut)
    queue - FIFO (First Int First Qut)

* Global Context
<-> Local Context
Context : 함수 실행시 사용가능한 환경 (메모리 정보, 변수)

*setTimeout -> 콜백 이해
밀리 초 후에 등록한 함수(콜백함수)를 실행시킴

- 이벤트 루프 : 이벤트 발생시 호출 할 콜백함수들을 관리
                콜백함수의 실행 순서를 결정
- 백그라운드 : 타이머, 이벤트 리스너가 대기
                여러 작업이 동시에 실행될 수 있음
- 태스크 큐 : 이벤트 발생 후, 백그라운드에서 태스크큐로 타이머나
                이벤트 리스너를 전송, 큐의 순서대로 실행

1.1.4 논 블로킹 I/O

* 논 블로킹 (NonBlocking): 비동기 / 바로 리턴 / setTimeout, setImmediate 등을 사용해 논 블로킹으로
* 블로킹 (Blocking): 동기 / 바로 리턴하지 않음
* 비동기 (Synchronous)
* 동기 (Asynchronous)

* 컴퓨터에서 제일 많이 시간이 걸리는 동작
I/O 작업

33P
function longRunningTask()
{
    console.log('작업 끝');
}
console.log('시작');
longRunningTask();
console.log('다음 작업');

33P
function longRunningTask()
{
    console.log('작업 1');
    setTimeout(longRunningTask2,0);
    console.log('작업 1 끝');
}
function longRunningTask2()
{
    console.log('작업 2');
    console.log('작업 2 끝');
}
console.log('시작');
setTimeout(longRunningTask,0);
console.log('다음작업');

NonBlocking 안에 NonBlocking이 또 들어가면 복잡해지니 한번 생각 해 봐야 한다.

1.1.5 싱글 스레드

*process vs. thread
프로그램을 실행할 때, 모래시계가 돌아가는 중에는 하드디스크에 있는 exe 프로그램이 메인메모리에 올라가는 중이다.
CPU>메인메모리>I/O
프로세서는 실행 파일이 메인메모리에 올라가(Loding)서 실행이 되고 있는 상황
이것이 여러개 있으면 멀티 프로세싱
프로세스에 의해서 만들어지는 작업들이 thread, 이것들이 여러개 인것이 멀티 thread

프로세스와 thread는 메모리를 공유하지 않는다.
thread는 thread 끼리 메모리를 공유한다.

Node의 실행파일 : Node.exe
Node에서 사용자(프로그래머)가 사용할 수 있는 thread는 하나

Node 12버전 이후에는 멀티스레드 가능하게 됨 / 권하지는 않음

멀티thread : 사용되는 자원이 많이 든다
    - Thread Pool : Thread를 많이 만들어 놓고 필요할 때마다 사용 / 필요 없으면 다시 넣어 둔다. 관리를 잘 해야한다.
                    Thread는 메모리를 공유하기 때문에 충돌도 잘 일어난다.
    - Main Thread
    - Worker Thread : Thread Pool과 비슷

1.2 Server로서의 Node
서버 : I/O 많이 일어남, 효율적 방법 모색 필요
Node Server는 Single Thread, NonBlocking --> 장단점 (특징이 비슷하다)
장점 : 하나의 Thread에 많은 I/O 대응 (I/O의 횟수는 많고, Data 양은 적음)
        주로 실시간 채팅, 주식사이트, JSON Data 제공 API Server
단점 : Single Thread라 관리가 필요함, Server의 규모가 커졌을 때 관리가 어려움

2. 알아 두어야할 JavaScript : ES2015+ 문법
    ES : ECEMAScript
    ES2015 = ES6


2.1 ES2015+
2015년 발표 자바스크립트 표준 문법안 : 상당한 변화
2016년 승인후 ES6

Babel : 구형 브라우저에서 ES6 돌아가게 해주는 도구

2.1.1 const, let
*var : 변수 선언(이전 버전)
---> const, let으로 대체

*var의 단점 : Hoisting (호이스팅)
    - 변수의 선언이 아무곳에서 이루어져서 소스코드 이해도가 떨어짐(가독성이 나쁨)
    - 함수 스코프(대괄호 안에서 선언이 되어도 밖에서도 사용 가능)
*const, let : 블록 스코프 (block scope)
???{
    // block ???앞에 무엇이 오는지에 따라 달라짐
    괄호 안에서 선언 되면 안에서만 접근 가능
}

*const, let의 차이
const : 자바로 따지면 final 한 번 넣은 값은 변경 불가, 초기화 할 때 값을 넣지 않으면 에러 (상수)
let : 초기화 및 값 수정이 여러번 가능

2.1.2 템플릿 문자열
* 문자열 표현 
    - ''
    - ""
    - `` (백틱, esc키 밑에 있는 물결 키와 함께있음)


    var n1=1;
    var n2=2;
    var res=3;
    var string1=n1 + '더하기' + n2 + '는\' '+res+'\'';
    console.log(stirng1);

    var string2=`${n1} 더하기 ${n2} 는 '${res}'`;
    console.log(string2);

2.1.3 객체 리터럴
* literal : 구체적인 값
    1, 123, "김진홍"
* object literal : 생성된 객체 , 실행 도중에 객체의 속성, 메소드를 동적으로 추가 가능하다
    - 이전 버전 (지금도 사용 가능)
var sayNode=function()
{
    console.log('Node');
};

var es='ES';
var oldObject = {   // 객체 리터럴 사용 초기화
    sayJS : function(){
        console.log('JS');
    },
    sayNode : sayNode,
};
oldObject[es+6]='Fantastic';
oldObject.sayNode='test';
oldObject.sayJS();
console.log(oldObject.ES6);


    - 최신 버전
const newObject={
    sayJs(){
        console.log('JS');
    },
    sayNode,        // sayNode : sayNode - key:value (key = value 가 똑같으면 생략 가능)
    [es+7] : '환타스틱'
};
newObject.sayNode();
newObject.sayJS();
console.log(newObject.ES7);

- (name : name, age : age) ==> (name, age);

2.1.4 화살표 함수 arrow function
    - 기존 : function을 이용해서 함수 정의(선언)
    - 신규 : '=>' 기호 사용

- old
function add1(x,y)
{
    return x+y;
}

- new
const add2=(x,y) => {return x+y;};
const add3=(x,y) => x+y; // 함수내의 명령이 한 개이고, 리턴문 
const add4=(x,y) => (x+y);

function not1(x){return !x;}
-->
const not2=(x) => {return !x;};
...

* old 와 new의 차이점 : this의 바인드 방식 차이(bind) (this : 현재의 객체를 의미한다
    - old의 객체 내부의 함수에서 this 를 바로 접근 못함
    - that처럼 다른 변수로 할당 받아서 사용한다.
    - new에서의 this는 자신의 객체 (자바와의 비슷한 this)
    - forEach : 나열가능한 객체(iterable)에 들어있는 원소 각각에 대해 
                매개변수인 콜백함수를 호출 함

2.1.5 구조분해할당
    - old
        객체, 배열로부터 속성 또는 요소 접근
        객체명, 속성명 ---> 객체명[속성명]
        배열명[인덱스]

const a=oldObject; (oldObject의 모든 것을 가져온다. / 구조분해할당은 모든 것을 가져오지 말고, 필요한 것만 가져오자)
= =(대입 또는 할당 연산장)의 왼쪽에는 리터럴, 수식사용 불가

* 객체의 속성명(키 -콜론왼쪽)과 할당받을 변수를 같게 (72p~73p 참조)

2.1.6 Class : 클래스 문법은 ES6에서 새로 도입
    - 자바스크립트를 학술적으로는 객체지향 언어라 하지 않음
    - 객체 중심 언어, 프로토타입 기반 언어(Prototype Based Language)
        Classless Language, Instance Based Language
    - Prototype : 원형 - 객체를 사용하는데, 객체의 원형만 가지고 있고, (69p / oldObject[es+6] => oldObject[es6])
    실행 도중에 속성, 메소드를 추가 또는 삭제
    - 상속, 다향성 구현이 가능하나 매우 어려움

*Prototype 상속 예제 코드
var Human=function(type)    // function - Function 객체
{
    this.type=type || 'human';
}; //this를 사용함으로 써 Human은 Class명이자 생성자 역할

Human.isHuman=function(human)    // isHuman이라는 메소드가 된다
{
    return human instanceOf Human;  //instanceOf는 뒤쪽이 앞쪽을 포함하고 있는가
};  // h.isHuman(man);

Human.prototype.breathe=function()
{
    alert('h-a-a-a-m');
};  //  일반 메소드 구현
// 상기 전까지 Human 객체 정의

var Zero = function(type, firstName, lastName)
{
    human.apply(this,arguments);    // 자바의 super 역할
    this.firstName=firstName;
    this.lastName=lastName;
}   // Zero 객체가 Human 객체를 상속한 것으로 연결

Zero.prototype=Object.create(Human.prototype);  // Human 객체의 원형 복제
Zero.prototype.constructor=Zero;    // 비로소 상속 완성
Zero.prototype.sayName=function()
{
    //alert(this.firstName + ' ' + this.lastName);
    alert(` ${this.firstName} : ${this.lastName}`);
};  //  자식객체의 메소드 구현
var oldZero=new Zero('human','Zero','Cho');
human.isHuman(oldZero);

* Class 문법 도입 : 새로운 코드
class Human
{
    constructor(type = 'human') // 생성자, 매개변수 1개, human - 디폴트 값 설정
    {                           //  let hu=new Human(); 이경우 human이 들어감 , let hu2=new Human('woman');
        this.type=type;         //  속성을 정의 this를 이용
    }

    static isHuman(human)
    {
        return human instanceof Human;
    }

    breath()
    {
        alert('h-a-a-a-m');
    }
}

class Zero extends Human        // extends : 상속관계 정의
{
    constructor(type, firstName, lastName)
    {
        super(type);
        this.firstName=firstName;
        this.lastName=lastName;
    }

    sayName()
    {
        super.breath();
        alert('${this.firstName} ${this.lastName}');
    }
}

const newZero=new Zero('human','Zero','Cho');
Human.isHuman(newZero);

프로토타입을 계속 타고 내려가는걸 프로토타입 체인이라고 한다

2.1.7 프로미스 : Promise
    - 프로미스 이전의 비동기 : 콜백처리
    ES6부터는 프로미스 사용 권장
    - 반드시 알아가야 할 객체
    - 비동기 처리에서 성공, 실패의 경우를 나눠서 구현
    - 프로미스 사용 이유 또는 문법 개발 배경
        - 콜백 지옥(CallBack Hell)현상을 극복하기 위해
    프로미스 사용 규칙
        - 프로미스 객체 생성
            객체 생성시의 매개변수 : resolve(), reject()를 매개변수로 가진 콜백함수(화살표 함수) :
                                    I/O등 비동기처리할 코드 작성
        - 생성된 객체에 then(), catch(), finally() 메소드를 호출
            세 개의 메소드의 매게변수는 : 콜백함수로 구현
            resolve() 호출 ----> then() 호출
            reject()호출 -----> catch() 호출
            호출 하건 호출하지 않건 ------> finally() 실행

    - 실행은 바로 하지만 결과값은 나중에 받음
    - 중복도 가능 then 안에 promise를 넣을수 있음
        다음 then은 위의 promise return 값을 받아옴

*콜백을 프로미스로 변경
    - 콜백
    - 프로미스

    - 프로미스 사용 X
function findAndSaveUser(Users)
{
    Users.findOne({}, (err, user) => {
        if(err)
        {
            return console.error(err);
        }
    }

        user.name='zero';
        user.save((err) =>{
            if(err)
            {
                return console.error(err);
            }

            User.findOne({gender : 'm' }, (err,user) =>{

            }
            
            );
        }
        
        );
    
    );
}

    - 프로미스 사용 O
function findAndSaveUser(Users){
    Users.findOne({})   // findOne() - 프로미스 객체 리턴
    .then((user) =>{
        user.name='zero';
        return user.save(); // save() - 프로미스 객체 리턴
    })
    .then((user) => {
        return User.findOne({gender : 'm'});
    })
    .then((user) =>{
        // 생략
    })
    .catch(err => {
        console.error(err);
    });
}

* 여러개의 프로미스 한꺼번에 실행하기
 : Promise.all() - 전체 메소드를 객체 생성하지 않고 실행
    하나라도 실패하면 catch로 감

 const promise1=Promise.resolve('성공1');
 const promise2=Promise.resolve('성공2');
 // Promise.resolve() : 즉시 resolve하는 프로미스 객체 생성
 // Promise.reject() : 즉시 reject하는 프로미스 객체 생성
 Promise.all([promise1,promise2])
 .then((result) => {
     console.log(result); // ['성공1','성공2'];
 })
 .catch((error) =>{
     console.error(error);
 });

 2.1.8 async/await : ES2017부터, Node 7.6 부터 지원
    - ES6+/ES2015+
    - 프로미스가 콜백헬을 극복하고 있지만, 코드의 장황성은 해소하지 못함

    - 프로미스 

    function findAndSaveUser(Users){
        Users.findOne({})   // findOne() - 프로미스 객체 리턴
        .then((user) =>{
            user.name='zero';
            return user.save(); // save() - 프로미스 객체 리턴
        })
        .then((user) => {
            return User.findOne({gender : 'm'});
        })
        .then((user) =>{
            // 생략
        })
        .catch(err => {
            console.error(err);
        });
    }

    1) function을 async function으로 변경
    function findAndSaveUser(Users)
    {

    }
    =>
    async function findAndSaveUser(Users){
    }

    2) 프로미스 객체 반환 함수들에 호출
    변수 = await 함수명();

    async function findAndSaveUser(Users){
        try{
            let user=await Users.findOne({});
            user.name='zero';
            user=await user.save();
            user=await Users.findOne({gender : 'm'});
            // 생략
        }catch(error){
            console.error(error);
        }
    }

    화살표 함수도 async/await 사용 가능

    * async 함수는 항상 Promise 객체를 반환
    async function findAndSaveUser(Users){
        // ...
        return enw Promise({...});
    }

    findAndSaveUser().then(() =>{

    });

    async function other(){
        const res=await.findAndSaveUser();
    }

    지금까지는 주로 서버용

2.2 Front-End JS
: html내의 script 태그 안에 작성되어 실행되는 JS코드
DOM, BOM, aJax 
DOM : Document Object Model : html 소스코드를 객체로 만들어
                            document 객체로 관리
            - elements : html, head, body (태그)등등, 노드(node, NodeJs 아님)
            - attribute  : 시작 택에 있는 속성
                    ex) a태그의 href
            - getElementById
            - getElementsById
            - getElementsByClassName
            - querySelector, querySelectorAll
            (위의 것들은 요즘에는 잘 사용 안 함, UI 프로그램으로 만듬)

BOM : Browser Object Model : window 객체, document객체 , location 객체 history 객체...
            - location.href = '주소'
            - redirection 기능 구현시 사용

2.2.1 aJax
    - Asynchronous JavaScript and XML (비동기 자바스크립트와 XML)
        웹페이지 전환없이 새로운 데이터를 불러와서
        화면에 변화를 부분적으로 하게 하는 기능
    - Web 2.0 시대 도래
    - MashUp(여러 곳에서의 서비스를 가져와서 내 홈페이지에 구현), OpenAPI 

    - aJax 요청~응답 라이브러리
     XMLHttpRequest 객체 : 표준
     fetch()
     fetch 이전에 $.ajax() ===> jQuery 에 있던 기능
     axios() : 프로미스, async/await 잘 지원

    front.html 사용예제
        - axios.get() : GET 요청 대응하는 ajax 기능 호출 메소드
            반환값 : 프로미스 객체
            then이 쓰이는 이유 : 프로미스 객체를 반환하기 때문에
        - axios.post() : POST 요청 처리

        - p.83 예제코드는 실행시 에러 발생
            이유 : CORS 에러 (p482 참고)

2.2.2 FormData
form태그와 관련, 동적으로 관리가 가능하다.

2.2.3 encodeURIComponent, decodeURIComponent
    - url 주소에서 한글 처리 하기 위한 메소드
    - BOM 중의 window 객체의 메소드
        window객체는 BOM 객체의 최상위 객체
    alert(), confirm(), open(), close()
    <== window.alert(), window.confirm(), window.open(), window.close();

2.2.4 데이터 속성과 dataset
    - HTML5에서 태그에 사용자 정의 속성을 사용할 수 있음
    data-+ 사용자정의 속성명
    data-id
    data-user-job
    -->
    dataset으로 사용할 때
    키 값은 data- 를 빼어낸 단어를 사용
    data- 다음에 합성어(user-job) ===> userJob으로 바꾼다

